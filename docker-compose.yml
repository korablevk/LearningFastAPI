version: "3.8"
services:
  # nginx:
  #   build:
  #     context: .
  #     dockerfile: "Dockerfile.nginx"
  #   container_name: booking_nginx
  #   ports:
  #     - 80:80
  #     - 443:443
  #   links:
  #     - booking
  #     - flower

  db:
    image: postgres:15
    container_name: booking_db
    restart: always
    env_file:
      - .env-non-dev
    ports:
      - "5432:5432"
    volumes:
      - postgresdata:/var/lib/postgresql@16/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
      PGADMIN_CONFIG_WTF_CSRF_CHECK_DEFAULT: 'False'
      PGADMIN_CONFIG_WTF_CSRF_ENABLED: 'False'
    ports:
      - "8082:80"
    depends_on:
      - db

  redis:
    image: redis:7
    container_name: booking_redis

  booking:
    image: booking_app
    build:
      context: .
    container_name: booking_app
    env_file:
      - .env-non-dev
    depends_on:
      db:
          condition: service_healthy
      redis:
        condition: service_started
    # Если не работает эта команда, используйте закомментированную
    # command: ["/booking/docker/app.sh"]
    command: sh -c "alembic upgrade head && gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000"
    ports:
      - 7777:8000

  celery:
    image: booking_celery
    build:
      context: .
    container_name: booking_celery
    # Если не работает эта команда, используйте закомментированную
    # command: ["/booking/docker/celery.sh", "celery"]
    command: sh -c "celery --app=app.tasks.celery_app:celery_app worker -l INFO"
    env_file:
      - .env-non-dev
    depends_on:
      - redis

  celery_beat:
    image: booking_celery
    build:
      context: . # celery это библиотека, у неё нет образа, берём из основного билда
    container_name: booking_celery_beat
    # Если не работает эта команда, используйте закомментированную
    # command: ["/booking/docker/celery.sh", "celery_beat"] # Второй аргумен для if/elif в скрипте
    command: sh -c "celery --app=app.tasks.celery_app:celery_app worker -l INFO -B"
    env_file:
      - .env-non-dev
    depends_on:
      - redis

  flower:
    image: booking_flower
    build:
      context: .
    container_name: booking_flower
    # Если не работает эта команда, используйте закомментированную
    # command: ["/booking/docker/celery.sh", "flower"]
    command: sh -c "celery --app=app.tasks.celery_app:celery_app flower"
    # При запуске через nginx необходимо запускать команду ниже для корректной работы js и css
    # command: sh -c "celery --app=app.tasks.celery_app:celery_app flower --url_prefix=/flower"
    env_file:
      - .env-non-dev
    depends_on:
      - redis
    ports:
      - 5555:5555

  prometheus:
     image: prom/prometheus:v2.43.0
     container_name: prometheus
     volumes:
       - ./prometheus.yml:/etc/prometheus/prometheus.yml
       - prometheusdata:/prometheus
     restart: unless-stopped
     ports:
       - 9090:9090

  grafana:
     image: grafana/grafana:9.4.7
     container_name: grafana
     volumes:
       - grafanadata:/var/lib/grafana
     restart: unless-stopped
     ports:
       - 3000:3000
     user: '0'

volumes:
  postgresdata:
  grafanadata:
  prometheusdata: